//: Task 1

import UIKit

class Animal{
    var color: String
    
    init(c:String){
        self.color = c;
    }
    
    func sound(){
        print("blablablabla")
    }
}

class Cat: Animal{
    var name: String
    init(n:String,c:String){
        self.name = n;
        super.init(c: c)
    }
    
    override func sound(){
        print("meowwwwww")
    }
}

class Dog: Animal{
    var name: String
    init(n:String,c:String){
        self.name = n;
        super.init(c: c)
    }
    
    override func sound() {
        print("bhaowwww bhaowwww")
    }
    
    func eat(){
        print("dog eating food")
    }
}

var cat = Cat(n:"mio",c:"white")
var dog = Dog(n:"john",c:"Black")
var arr = [Animal]()

arr.append(cat)
arr.append(dog)

for item in arr {
    if let cat = item as? Cat{
        cat.sound()
    }
    if let dog = item as? Dog{
        dog.sound()
        dog.eat()
    }
}

Task#2
protocol Attendance{
    func checkIn(id:String) -> Bool
    func checkOut(id:String) -> Bool
}

class Student: Attendance{
    var _name: String;
    var _id: String;
    
    init(name:String, id:String){
        self._name = name;
        self._id = id
    }
    
    func checkIn(id:String) -> Bool {
        print("\(self._name) is check in")
        return true
    }
    
    func checkOut(id:String) -> Bool {
        print("\(self._name) is check out")
        return true
    }
}

var mohsin = Student(name:"Mohsin Ghani", id:"0065")
mohsin.checkIn(id: "0065")
mohsin.checkOut(id: "0065")


Task#3

class Point: Equatable{
    var _x,_y:Int
    
    init(x:Int,y:Int){
        self._x = x;
        self._y = y;
    }
    
    static func ==(lhs:Point,rhs:Point)->Bool{
        return lhs._x == rhs._x && lhs._y == lhs._y
    }
}

var p1 = (x:10,y:10)
var p2 = (x:10,y:10)
var p3 = (x:20,y:20)

print("p1 == p2: \(p1 == p2)")
print("p1 != p2: \(p1 != p2)")
print("p1 == p3: \(p1 == p3)")
print("p1 != p3: \(p1 != p3)")
